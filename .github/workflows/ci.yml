---
name: CI

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_BACKTRACE: 1

jobs:
  # Compile native CLI binary
  build-cli:
    name: Test CLI ${{ matrix.build.target }}
    runs-on: ${{ matrix.build.os }}

    strategy:
      fail-fast: false
      matrix:
        build:
          # alphabatized by target
          - os: macOS-latest
            target: aarch64-apple-darwin
            cross: true
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: ubuntu-22.04
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-22.04
            target: i686-unknown-linux-gnu
            cross: true
          - os: ubuntu-22.04
            target: i686-unknown-linux-musl
            cross: true
          - os: macOS-latest
            target: x86_64-apple-darwin
            cross: false
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            cross: false
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            cross: false

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install build inputs
        if: runner.os == 'Linux' && !matrix.build.cross
        run: sudo apt install musl-tools

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: nightly
          target: ${{ matrix.build.target }}

      - if: matrix.build.cross
        name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Cache cargo
        uses: actions/cache@v4
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - if: ${{ !matrix.build.cross }}
        run: cargo test -- --include-ignored

      # One test is ignored because it requires network access, which
      # complicates building with the Nix flake. However, I don't know how to
      # pass `-- --include-ignored` in a way that doesn't break cross! So for
      # now, we ignore the ignored test when using `cross`.
      - if: matrix.build.cross
        run: cross test

  # Compile napi-rs native Node.js library
  build-napi:
    name: Build Node-API ${{ matrix.build.target }}
    runs-on: ${{ matrix.build.host }}

    strategy:
      fail-fast: false
      matrix:
        build:
          - host: macos-latest
            target: aarch64-apple-darwin
            script: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
              export CC=$(xcrun -f clang)
              export CXX=$(xcrun -f clang++)
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path)
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT"
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target aarch64-apple-darwin
          - host: macos-latest
            target: x86_64-apple-darwin
            script: |
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target x86_64-apple-darwin
          # Use the oldest Ubuntu runner to bring in the oldest glibc version.
          # This ensures the Node.js native module is compatible with as many
          # runtime targets as possible.
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            script: |-
              set -e
              ./node_modules/.bin/napi build --platform --release --js false --features napi-rs --cargo-flags=--lib --target x86_64-unknown-linux-gnu

    steps:
      - uses: actions/checkout@v5

      - name: Setup node
        uses: actions/setup-node@v6
        with:
          node-version: lts/*
          check-latest: true
          cache: npm

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        id: rust-toolchain
        with:
          toolchain: nightly
          target: ${{ matrix.build.target }}

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            .cargo-cache
            target/
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.cachekey }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts --loglevel error

      - name: Build
        run: ${{ matrix.build.script }}
        shell: bash
